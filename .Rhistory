Shuffle_sequence(matrix(c(1,1,1,1,0.1,2,2,2),4,2))
install.packages("D:/Program Files (x86)/Tencent/WeChat/WeChat Files/wxid_en3jq1b8dopq22/FileStorage/File/2021-12/EAinference.zip", repos = NULL, type = "win.binary", lib="D:/R/R-4.1.0/library")
install.packages("D:/Program Files (x86)/Tencent/WeChat/WeChat Files/wxid_en3jq1b8dopq22/FileStorage/File/2021-12/EAinference.zip", repos = NULL, type = "win.binary", lib="D:/R/R-4.1.0/library")
install.packages("EAinference", lib="D:/R/R-4.1.0/library")
library(EAinference)
library(mvtnorm)
library(scalreg)
n <- 200
p <- 3000
lambda.univ <- sqrt(2*log(p)/n)/3
alpha<- c(2,1,2,1)
rou <- c(1/5,1/5,2,4/5,4/5)
beta.t <- function(alpha){
beta0 <- sapply(1:p,function(i)  3*lambda.univ/(i^alpha))
beta0[seq(1500,3000,300)] <- rep(3*lambda.univ,length(seq(1500,3000,300)))
return(beta0)
}
sigma <- function(rou){
x <- sapply(1:p,function(j)   sapply(1:p,function(k) rou^(abs(j-k) )))
return(x)
}
x <- function(sigma){
x <- matrix(NA,n,p)
x.ww<- rmvnorm(n,rep(0,p),sigma)
x <- sapply(1:p,function(j)  x.ww[,j]*sqrt(n)/sqrt(sum((x.ww[,j])^2)))
return(x)
}
y <- function(x,beta){
epcilon <- rmvnorm(1,rep(0,n),diag(n))
return(x%*%beta+t(epcilon))
}
###
#for(i in 1:1){
x <- x(sigma(rou[1]))
beta <-beta.t(alpha[1])
y <- y(x,beta)
#lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)
#b.lasso <- lasso$B0
#b.slasso <- slasso$B0
library(EAinference)
library(mvtnorm)
library(scalreg)
n <- 200
p <- 3000
lambda.univ <- sqrt(2*log(p)/n)/3
alpha<- c(2,1,2,1)
rou <- c(1/5,1/5,2,4/5,4/5)
beta.t <- function(alpha){
beta0 <- sapply(1:p,function(i)  3*lambda.univ/(i^alpha))
beta0[seq(1500,3000,300)] <- rep(3*lambda.univ,length(seq(1500,3000,300)))
return(beta0)
}
sigma <- function(rou){
x <- sapply(1:p,function(j)   sapply(1:p,function(k) rou^(abs(j-k) )))
return(x)
}
x <- function(sigma){
x <- matrix(NA,n,p)
x.ww<- rmvnorm(n,rep(0,p),sigma)
x <- sapply(1:p,function(j)  x.ww[,j]*sqrt(n)/sqrt(sum((x.ww[,j])^2)))
return(x)
}
y <- function(x,beta){
epcilon <- rmvnorm(1,rep(0,n),diag(n))
return(x%*%beta+t(epcilon))
}
###
#for(i in 1:1){
x <- x(sigma(rou[1]))
beta <-beta.t(alpha[1])
y <- y(x,beta)
#lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)$LSE
#b.lasso <- lasso$B0
#b.slasso <- slasso$B0
scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)$lse
#lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
out <- scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)
out
out$lse
out$coefficients
out$lse$coefficients
out$lse$coefficients[1]==out$coefficients[1]
out$lse$hsigma
out$hsigma
beta[3000]-out$lse$coefficients[3000]
which.max(beta)
beta[1]-beta[3000]
beta[1]-beta[1500]
beta[3000]-out$coefficients[3000]
out1 <-scalreg(x,y,lam0 = lambda.univ)
out1$coefficients[3000]-beta[3000]
library(EAinference)
library(mvtnorm)
library(scalreg)
n <- 200
p <- 3000
lambda.univ <- sqrt(2*log(p)/n)
alpha<- c(2,1,2,1)
rou <- c(1/5,1/5,4/5,4/5)
beta.t <- function(alpha){
beta0 <- sapply(1:p,function(i)  3*lambda.univ/(i^alpha))
beta0[seq(1500,3000,300)] <- rep(3*lambda.univ,length(seq(1500,3000,300)))
return(beta0)
}
sigma <- function(rou){
x <- sapply(1:p,function(j)   sapply(1:p,function(k) rou^(abs(j-k) )))
return(x)
}
x <- function(sigma){
x <- matrix(NA,n,p)
x.ww<- rmvnorm(n,rep(0,p),sigma)
x <- sapply(1:p,function(j)  x.ww[,j]*sqrt(n)/sqrt(sum((x.ww[,j])^2)))
return(x)
}
y <- function(x,beta){
epcilon <- rmvnorm(1,rep(0,n),diag(n))
return(x%*%beta+t(epcilon))
}
###
#for(i in 1:1){
x <- x(sigma(rou[1]))
beta <-beta.t(alpha[1])
y <- y(x,beta)
#lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
out <- scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)
#b.lasso <- lasso$B0
#b.slasso <- slasso$B0
out1 <-scalreg(x,y,lam0 = lambda.univ)
out$lse
out$lse$hsigma
out$hsigma
out$lse$coefficients[3000]-beta[3000]
out$coefficients[3000]-beta[3000]
library(EAinference)
library(mvtnorm)
library(scalreg)
n <- 200
p <- 3000
lambda.univ <- sqrt(2*log(p)/n)/2
alpha<- c(2,1,2,1)
rou <- c(1/5,1/5,4/5,4/5)
beta.t <- function(alpha){
beta0 <- sapply(1:p,function(i)  3*lambda.univ/(i^alpha))
beta0[seq(1500,3000,300)] <- rep(3*lambda.univ,length(seq(1500,3000,300)))
return(beta0)
}
sigma <- function(rou){
x <- sapply(1:p,function(j)   sapply(1:p,function(k) rou^(abs(j-k) )))
return(x)
}
x <- function(sigma){
x <- matrix(NA,n,p)
x.ww<- rmvnorm(n,rep(0,p),sigma)
x <- sapply(1:p,function(j)  x.ww[,j]*sqrt(n)/sqrt(sum((x.ww[,j])^2)))
return(x)
}
y <- function(x,beta){
epcilon <- rmvnorm(1,rep(0,n),diag(n))
return(x%*%beta+t(epcilon))
}
###
#for(i in 1:1){
x <- x(sigma(rou[1]))
beta <-beta.t(alpha[1])
y <- y(x,beta)
#lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
out <- scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)
#b.lasso <- lasso$B0
#b.slasso <- slasso$B0
out1 <-scalreg(x,y,lam0 = lambda.univ)
out$coefficients[3000]-beta[3000]
out$lse$coefficients[3000]-beta[3000]
out$hsigma
out$lse$hsigma
library(EAinference)
library(mvtnorm)
library(scalreg)
n <- 200
p <- 3000
lambda.univ <- sqrt(2*log(p)/n)
alpha<- c(2,1,2,1)
rou <- c(1/5,1/5,4/5,4/5)
beta.t <- function(alpha){
beta0 <- sapply(1:p,function(i)  3*lambda.univ/(i^alpha))
beta0[seq(1500,3000,300)] <- rep(3*lambda.univ,length(seq(1500,3000,300)))
return(beta0)
}
sigma <- function(rou){
x <- sapply(1:p,function(j)   sapply(1:p,function(k) rou^(abs(j-k) )))
return(x)
}
x <- function(sigma){
x <- matrix(NA,n,p)
x.ww<- rmvnorm(n,rep(0,p),sigma)
x <- sapply(1:p,function(j)  x.ww[,j]*sqrt(n)/sqrt(sum((x.ww[,j])^2)))
return(x)
}
y <- function(x,beta){
epcilon <- rmvnorm(1,rep(0,n),diag(n))
return(x%*%beta+t(epcilon))
}
###
#for(i in 1:1){
x <- x(sigma(rou[1]))
beta <-beta.t(alpha[1])
y <- y(x,beta)
lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
out <- scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)
#b.lasso <- lasso$B0
#b.slasso <- slasso$B0
lasso$B0[3000]-beta[3000]
out$coefficients[3000]-beta[3000]
out$lse$coefficients[3000]-beta[3000]
out$hsigma
out$lse$hsigma
devtools::install_github("YaohuiZeng/biglasso")
?biglasso
??biglasso
library(biglasso)
?`biglasso-package`
?biglasso
bout<-biglasso(x,y,penalty = "lasso",lambda = lambda.univ)
bx <- as.big.matrix(x)
bout<-biglasso(bx,y,penalty = "lasso",lambda = lambda.univ)
bout$beta[3000]-lasso$B0[3000]
bout$beta[3000]-beta[3000]
bout<-biglasso(bx,y,penalty = "lasso",lambda = lambda.univ,family = "gaussian")
bout$beta[3000]-beta[3000]
bout<-biglasso(bx,y,penalty = "lasso",family = "gaussian")
bout$beta[3000]-lasso$B0[3000]
bout<-biglasso(bx,y,penalty = "lasso",lambda = lambda.univ/3,family = "gaussian")
bout$beta[3000]-lasso$B0[3000]
bout<-biglasso(bx,y,penalty = "lasso",lambda = lambda.univ,family = "gaussian",lambda.log.scale = FALSE)
bout$beta[3000]-lasso$B0[3000]
bout<-biglasso(bx,y,penalty = "lasso",family = "gaussian",lambda.log.scale = FALSE)
bout$beta[3000]-lasso$B0[3000]
bout<-biglasso(bx,y,penalty = "lasso",lambda = c(lambda.univ,lambda.univ/2),family = "gaussian",lambda.log.scale = FALSE)
bout$beta[3000]-lasso$B0[3000]
library(glmnet)
lasso1 = cv.glmnet(x, y, family = "gaussian", alpha = lambda.univ)
lasso1$glmnet.fit$beta[3000]-lasso$B0[3000]
lasso1 = cv.glmnet(x, y, family = "gaussian", alpha = 1)
lasso1$glmnet.fit$beta[3000]-lasso$B0[3000]
?cv.glmnet
?glmnet
lasso1 = cv.glmnet(x, y, family = "gaussian", alpha = 1,lambda=seq(-1,1,0.1))
lasso1 = cv.glmnet(x, y, family = "gaussian", alpha = 1,lambda=seq(0,1,0.1))
lasso1$lambda
lasso1$glmnet.fit$lambda
lasso1$glmnet.fit$beta[3000]-beta[3000]
library(EAinference)
library(mvtnorm)
library(scalreg)
n <- 200
p <- 3000
lambda.univ <- sqrt(2*log(p)/n)
alpha<- c(2,1,2,1)
rou <- c(1/5,1/5,4/5,4/5)
beta.t <- function(alpha){
beta0 <- sapply(1:p,function(i)  3*lambda.univ/(i^alpha))
beta0[seq(1500,3000,300)] <- rep(3*lambda.univ,length(seq(1500,3000,300)))
return(beta0)
}
sigma <- function(rou){
x <- sapply(1:p,function(j)   sapply(1:p,function(k) rou^(abs(j-k) )))
return(x)
}
x <- function(sigma){
x <- matrix(NA,n,p)
x.ww<- rmvnorm(n,rep(0,p),sigma)
x <- sapply(1:p,function(j)  x.ww[,j]*sqrt(n)/sqrt(sum((x.ww[,j])^2)))
return(x)
}
y <- function(x,beta){
epcilon <- rmvnorm(1,rep(0,n),diag(n))
return(x%*%beta+t(epcilon))
}
###
z <- function()
#for(i in 1:1){
x <- x(sigma(rou[1]))
beta <-beta.t(alpha[1])
y <- y(x,beta)
lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
out <- scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)
#b.lasso <- lasso$B0
#b.slasso <- slasso$B0
library(EAinference)
library(mvtnorm)
library(scalreg)
n <- 200
p <- 3000
lambda.univ <- sqrt(2*log(p)/n)
alpha<- c(2,1,2,1)
rou <- c(1/5,1/5,4/5,4/5)
beta.t <- function(alpha){
beta0 <- sapply(1:p,function(i)  3*lambda.univ/(i^alpha))
beta0[seq(1500,3000,300)] <- rep(3*lambda.univ,length(seq(1500,3000,300)))
return(beta0)
}
sigma <- function(rou){
x <- sapply(1:p,function(j)   sapply(1:p,function(k) rou^(abs(j-k) )))
return(x)
}
x <- function(sigma){
x <- matrix(NA,n,p)
x.ww<- rmvnorm(n,rep(0,p),sigma)
x <- sapply(1:p,function(j)  x.ww[,j]*sqrt(n)/sqrt(sum((x.ww[,j])^2)))
return(x)
}
y <- function(x,beta){
epcilon <- rmvnorm(1,rep(0,n),diag(n))
return(x%*%beta+t(epcilon))
}
###
z <- function()
#for(i in 1:1){
x <- x(sigma(rou[1]))
beta <-beta.t(alpha[1])
y <- y(x,beta)
lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
out <- scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)
#b.lasso <- lasso$B0
#b.slasso <- slasso$B0
library(EAinference)
library(mvtnorm)
library(scalreg)
n <- 200
p <- 3000
lambda.univ <- sqrt(2*log(p)/n)
alpha<- c(2,1,2,1)
rou <- c(1/5,1/5,4/5,4/5)
beta.t <- function(alpha){
beta0 <- sapply(1:p,function(i)  3*lambda.univ/(i^alpha))
beta0[seq(1500,3000,300)] <- rep(3*lambda.univ,length(seq(1500,3000,300)))
return(beta0)
}
sigma <- function(rou){
x <- sapply(1:p,function(j)   sapply(1:p,function(k) rou^(abs(j-k) )))
return(x)
}
x <- function(sigma){
x.ww<- rmvnorm(n,rep(0,p),sigma)
x <- sapply(1:p,function(j)  x.ww[,j]*sqrt(n)/sqrt(sum((x.ww[,j])^2)))
return(x)
}
y <- function(x,beta){
epcilon <- rmvnorm(1,rep(0,n),diag(n))
return(x%*%beta+t(epcilon))
}
###
z <- function()
#for(i in 1:1){
x <- x(sigma(rou[1]))
beta <-beta.t(alpha[1])
y <- y(x,beta)
lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
out <- scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)
#b.lasso <- lasso$B0
#b.slasso <- slasso$B0
library(EAinference)
library(mvtnorm)
library(scalreg)
n <- 200
p <- 3000
lambda.univ <- sqrt(2*log(p)/n)
alpha<- c(2,1,2,1)
rou <- c(1/5,1/5,4/5,4/5)
beta.t <- function(alpha){
beta0 <- sapply(1:p,function(i)  3*lambda.univ/(i^alpha))
beta0[seq(1500,3000,300)] <- rep(3*lambda.univ,length(seq(1500,3000,300)))
return(beta0)
}
sigma <- function(rou){
x <- sapply(1:p,function(j)   sapply(1:p,function(k) rou^(abs(j-k) )))
return(x)
}
x <- function(sigma){
x.ww<- rmvnorm(n,rep(0,p),sigma)
x <- sapply(1:p,function(j)  x.ww[,j]*sqrt(n)/sqrt(sum((x.ww[,j])^2)))
return(x)
}
y <- function(x,beta){
epcilon <- rmvnorm(1,rep(0,n),diag(n))
return(x%*%beta+t(epcilon))
}
###
#for(i in 1:1){
x <- x(sigma(rou[1]))
beta <-beta.t(alpha[1])
y <- y(x,beta)
lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
out <- scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)
#b.lasso <- lasso$B0
#b.slasso <- slasso$B0
library(EAinference)
library(mvtnorm)
library(scalreg)
n <- 200
p <- 3000
lambda.univ <- sqrt(2*log(p)/n)
alpha<- c(2,1,2,1)
rou <- c(1/5,1/5,4/5,4/5)
beta.t <- function(alpha){
beta0 <- sapply(1:p,function(i)  3*lambda.univ/(i^alpha))
beta0[seq(1500,3000,300)] <- rep(3*lambda.univ,length(seq(1500,3000,300)))
return(beta0)
}
sigma <- function(rou){
x <- sapply(1:p,function(j)   sapply(1:p,function(k) rou^(abs(j-k) )))
return(x)
}
x <- function(sigma){
x.ww<- rmvnorm(n,rep(0,p),sigma)
x <- sapply(1:p,function(j)  x.ww[,j]*sqrt(n)/sqrt(sum((x.ww[,j])^2)))
return(x)
}
y <- function(x,beta){
epcilon <- rmvnorm(1,rep(0,n),diag(n))
return(x%*%beta+t(epcilon))
}
###
#for(i in 1:1){
x <- x(sigma(rou[1]))
beta <-beta.t(alpha[1])
y <- y(x,beta)
lasso <- lassoFit(x,y,type = "lasso",lbd = lambda.univ)
#slasso <- lassoFit(x,y,type = "slasso",lbd = lambda.univ)
out <- scalreg(x,y,lam0 = lambda.univ,LSE = TRUE)
#b.lasso <- lasso$B0
#b.slasso <- slasso$B0
a<-c(0,0)
b<-c(1,1)
c(a,b)
library(StatComp21088)
BGD <- function(input_data,real_result,alpha,theta){
n0 <- nrow(input_data)
p0 <- ncol(input_data)
gradient_increasment <- matrix(NA,nrow = n0, ncol = p0)
for (i in 1:n0){
g <- as.numeric(input_data[i,]*as.vector(real_result[i] - input_data[i,]%*%theta))
gradient_increasment[i,] <- g
}
avg_g <- colMeans(gradient_increasment)
theta <- theta + alpha * avg_g
return(theta)
}
x <- seq(0.1,10,0.002)
n <- length(x)
y <- 2*x+5+rnorm(n)
z <- as.matrix(data.frame(rep(1,n),x))
theta <- BGD(z, y,0.002,c(1,1))
print(theta)
MBGD <- function(input_data,real_result,batch_size,alpha,theta){
shuffle_sequence <- Shuffle_sequence(input_data)
x <- input_data[shuffle_sequence,]
y <- real_result[shuffle_sequence]
n <- nrow(x)
for(start in seq(1,n,batch_size)){
end <- min(c(start+batch_size-1,n))
Mini_train_data <- x[start:end,]
Mini_train_result <- y[start:end]
n0 <- nrow(Mini_train_data)
p0 <- ncol(Mini_train_data)
gradient_increasment <- matrix(NA,nrow = n0, ncol = p0)
for (i in 1:n0){
g <- as.numeric(Mini_train_data[i,]*as.vector(Mini_train_result[i] - Mini_train_data[i,]%*%theta))
gradient_increasment[i,] <- g
}
avg_g <- colMeans(gradient_increasment)
theta <- theta + alpha * avg_g
}
return(theta)
}
x <- seq(0.1,10,0.002)
n <- length(x)
y <- 2*x+5+rnorm(n)
z <- as.matrix(data.frame(rep(1,n),x))
theta <- BGD(z, y,100,0.002,c(1,1))
print(theta)
library(StatComp21088, lib.loc = "D:/R/R-4.1.0/library")
detach("package:StatComp21088", unload = TRUE)
library(StatComp21088)
remove.packages("StatComp21088", lib="~/R/win-library/4.1")
remove.packages("StatComp21088", lib="D:/R/R-4.1.0/library")
devtools::install_github("Sakoylf/StatComp21088",build_vignettes = TRUE, force=T)
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::document()
rm(list = c("BGD", "MBGD"))
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::install_github("Sakoylf/StatComp21088",
build_vignettes = TRUE, force=T)
